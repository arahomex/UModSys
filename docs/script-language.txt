Scripting language embedded to umodsys:


1. This is line-oriented language
2. The language is sh-like


Syntax regexps:
 1. Line empty/comment (ignored) if:
  \s*#.*
  \s*
 2. Line continued on next line if:
  .*\\
 3. Line processed on following parts:
   - Arg space-delimited, proceed substitudion after division : a bd e-f-.2
   - Arg starts with \" ends by next \", escaped by \\\" : "abc\n\"v"
     - arg processed with variable substitution
   - Arg starts with \' ends by next \', escaped by '' : 'abc\n\''v'
     - arg processed as it
   - Variable substitution rules:
     - variable: $varname : alphanumeric
     - command: $(command) : command processed without any escaping
     - adv-variable: ${variable} : variable can contan any char


Example of config script:
  set sys /usr/share/umodsys
  set loc `env HOME`/.local/umodsys
  #
  list-add bin $sys/bin
  list-add plugins $sys/bin $loc/bin
  list-add modules $sys/modules $loc/modules
  list-add templates $sys/templates $loc/templates
  list-add configs-ro $sys/configs
  list-add configs $loc/configs
  list-add state $loc/states
  #
  print `list-join plugin "\n"`
  #
  foreach plugin plugins
    dir-list plgs plugin *
    foreach plg plgs
      plugin-load plg
      if $error
        print $error
        exit
      endif
    end
  end
  #
  shell app MineApplication
  #
  app start default
  #
  shell app -



Control commands:
  end
    do func

  for <var> <min> <max> [<step>]
    push ctrl
    do {
      var = min
      if var>max go next
    }
    mark next
    func { 
      var += step, 
      if var>max go next
      go mark
    }

  foreach <var> <list>
    push ctrl
    do {
      idx=0
      if idx>=list.count go next
      var=list[idx]
    }
    mark next
    func { 
      idx++
      if idx>=list.count go next
      var=list[idx]
      go mark
    }

  begin
    push ctrl
    do none
    mark none
    func none

  if <expr>
    push ctrl
    do {
      val=expr
      if expr!=0 go next
      func {
        go end
      }
    }
    mark none
    func none

  elseif <expr>
    do func
    do {
      val=expr
      if expr!=0 go next
      func {
        go end
      }
    }
    mark none
    func none

  else
    do func
    do {
      func {
        go end
      }
    }

  while <expr>
  loop
  break


Valid extrairdinal examples:
  for i 1 10
    # ten times
  else
    # this works on i=11
  elseif i=0
    # this never run
  end

  if i=0
    break # exit from this 'if'
  end


